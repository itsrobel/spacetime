// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: apiv1/service.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	apiv1 "github.com/itsrobel/spacetime/internal/services/apiv1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MessageServiceName is the fully-qualified name of the MessageService service.
	MessageServiceName = "apiv1.MessageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MessageServiceMessageProcedure is the fully-qualified name of the MessageService's Message RPC.
	MessageServiceMessageProcedure = "/apiv1.MessageService/Message"
)

// MessageServiceClient is a client for the apiv1.MessageService service.
type MessageServiceClient interface {
	Message(context.Context, *connect.Request[apiv1.MessageData]) (*connect.Response[apiv1.MessageData], error)
}

// NewMessageServiceClient constructs a client for the apiv1.MessageService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMessageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MessageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	messageServiceMethods := apiv1.File_apiv1_service_proto.Services().ByName("MessageService").Methods()
	return &messageServiceClient{
		message: connect.NewClient[apiv1.MessageData, apiv1.MessageData](
			httpClient,
			baseURL+MessageServiceMessageProcedure,
			connect.WithSchema(messageServiceMethods.ByName("Message")),
			connect.WithClientOptions(opts...),
		),
	}
}

// messageServiceClient implements MessageServiceClient.
type messageServiceClient struct {
	message *connect.Client[apiv1.MessageData, apiv1.MessageData]
}

// Message calls apiv1.MessageService.Message.
func (c *messageServiceClient) Message(ctx context.Context, req *connect.Request[apiv1.MessageData]) (*connect.Response[apiv1.MessageData], error) {
	return c.message.CallUnary(ctx, req)
}

// MessageServiceHandler is an implementation of the apiv1.MessageService service.
type MessageServiceHandler interface {
	Message(context.Context, *connect.Request[apiv1.MessageData]) (*connect.Response[apiv1.MessageData], error)
}

// NewMessageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMessageServiceHandler(svc MessageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	messageServiceMethods := apiv1.File_apiv1_service_proto.Services().ByName("MessageService").Methods()
	messageServiceMessageHandler := connect.NewUnaryHandler(
		MessageServiceMessageProcedure,
		svc.Message,
		connect.WithSchema(messageServiceMethods.ByName("Message")),
		connect.WithHandlerOptions(opts...),
	)
	return "/apiv1.MessageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MessageServiceMessageProcedure:
			messageServiceMessageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMessageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMessageServiceHandler struct{}

func (UnimplementedMessageServiceHandler) Message(context.Context, *connect.Request[apiv1.MessageData]) (*connect.Response[apiv1.MessageData], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("apiv1.MessageService.Message is not implemented"))
}
